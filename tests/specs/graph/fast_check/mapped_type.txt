# https://jsr.io/@scope/a/meta.json
{"versions": { "1.0.0": {} } }

# https://jsr.io/@scope/a/1.0.0_meta.json
{ "exports": { ".": "./mod.ts" } }

# https://jsr.io/@scope/a/1.0.0/mod.ts
export type NoTypeAnn = {
    [value: string];
};
type Private1 = string;
type Private2 = number;
export type MappedTypeWithNamedType = {
    [K in T as U & Private1]: Private2;
};
export type Partial<T> = {
    [P in keyof T]?: T[P];
};
export type OptionalPlus<T> = {
    [P in keyof T]+?: T[P];
};
export type OptionalMinus<T> = {
    [P in keyof T]-?: T[P];
};
export type Flags<T> = {
    [P in keyof T]: boolean;
};
export type ReadOnly<T> = {
    readonly [P in keyof T]: T[P];
};
export type ReadOnlyPlus<T> = {
    +readonly [P in keyof T]: T[P];
};
export type ReadOnlyMinus<T> = {
    -readonly [P in keyof T]: T[P];
};

# mod.ts
import 'jsr:@scope/a'

# output
{
  "roots": [
    "file:///mod.ts"
  ],
  "modules": [
    {
      "kind": "esm",
      "dependencies": [
        {
          "specifier": "jsr:@scope/a",
          "code": {
            "specifier": "jsr:@scope/a",
            "resolutionMode": "import",
            "span": {
              "start": {
                "line": 0,
                "character": 7
              },
              "end": {
                "line": 0,
                "character": 21
              }
            }
          }
        }
      ],
      "size": 22,
      "mediaType": "TypeScript",
      "specifier": "file:///mod.ts"
    },
    {
      "kind": "esm",
      "size": 631,
      "mediaType": "TypeScript",
      "specifier": "https://jsr.io/@scope/a/1.0.0/mod.ts"
    }
  ],
  "redirects": {
    "jsr:@scope/a": "https://jsr.io/@scope/a/1.0.0/mod.ts"
  },
  "packages": {
    "@scope/a@*": "@scope/a@1.0.0"
  }
}

Fast check https://jsr.io/@scope/a/1.0.0/mod.ts:
  {}
  export type NoTypeAnn = {
    [value: string];
  };
  type Private1 = string;
  type Private2 = number;
  export type MappedTypeWithNamedType = {
    [K in T as U & Private1]: Private2;
  };
  export type Partial<T> = {
    [P in keyof T]?: T[P];
  };
  export type OptionalPlus<T> = {
    [P in keyof T]+?: T[P];
  };
  export type OptionalMinus<T> = {
    [P in keyof T]-?: T[P];
  };
  export type Flags<T> = {
    [P in keyof T]: boolean;
  };
  export type ReadOnly<T> = {
    readonly [P in keyof T]: T[P];
  };
  export type ReadOnlyPlus<T> = {
    +readonly [P in keyof T]: T[P];
  };
  export type ReadOnlyMinus<T> = {
    -readonly [P in keyof T]: T[P];
  };
  --- DTS ---
  export type NoTypeAnn = {
    [value: string];
  };
  type Private1 = string;
  type Private2 = number;
  export type MappedTypeWithNamedType = {
    [K in T as U & Private1]: Private2;
  };
  export type Partial<T> = {
    [P in keyof T]?: T[P];
  };
  export type OptionalPlus<T> = {
    [P in keyof T]+?: T[P];
  };
  export type OptionalMinus<T> = {
    [P in keyof T]-?: T[P];
  };
  export type Flags<T> = {
    [P in keyof T]: boolean;
  };
  export type ReadOnly<T> = {
    readonly [P in keyof T]: T[P];
  };
  export type ReadOnlyPlus<T> = {
    +readonly [P in keyof T]: T[P];
  };
  export type ReadOnlyMinus<T> = {
    -readonly [P in keyof T]: T[P];
  };
