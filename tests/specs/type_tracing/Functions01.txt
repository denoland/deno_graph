# mod.ts
export function test<T extends TypeParam = Default>(param: Param): Return {
}

class TypeParam {}
class Param {}
class Return {}
class Default {}

// the top two overloads should appear in the results
export function overloaded<T extends OverloadTypeParam>(param: OverloadParam): OverloadReturn;
export function overloaded(): string;
export function overloaded<T extends PrivateTypeParam>(param: PrivateParam): PrivateReturn {
}

class OverloadTypeParam {}
class OverloadParam {}
class OverloadReturn {}

class PrivateTypeParam {}
class PrivateParam {}
class PrivateReturn {}

# output
file:///mod.ts: EsmModuleSymbol {
    module_id: ModuleId(
        0,
    ),
    specifier: "file:///mod.ts",
    child_decls: {
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
    },
    exports: {
        "test": 0,
        "overloaded": 5,
    },
    re_exports: [],
    swc_id_to_symbol_id: {
        (
            Atom('test' type=inline),
            #2,
        ): 0,
        (
            Atom('TypeParam' type=dynamic),
            #2,
        ): 1,
        (
            Atom('Param' type=inline),
            #2,
        ): 2,
        (
            Atom('Return' type=inline),
            #2,
        ): 3,
        (
            Atom('Default' type=inline),
            #2,
        ): 4,
        (
            Atom('overloaded' type=dynamic),
            #2,
        ): 5,
        (
            Atom('OverloadTypeParam' type=dynamic),
            #2,
        ): 6,
        (
            Atom('OverloadParam' type=dynamic),
            #2,
        ): 7,
        (
            Atom('OverloadReturn' type=dynamic),
            #2,
        ): 8,
        (
            Atom('PrivateTypeParam' type=dynamic),
            #2,
        ): 9,
        (
            Atom('PrivateParam' type=dynamic),
            #2,
        ): 10,
        (
            Atom('PrivateReturn' type=dynamic),
            #2,
        ): 11,
    },
    symbols: {
        0: Symbol {
            symbol_id: 0,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            0,
                        ),
                        end: SourcePos(
                            77,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        Atom('TypeParam' type=dynamic),
                        #2,
                    ),
                ),
                Id(
                    (
                        Atom('Default' type=inline),
                        #2,
                    ),
                ),
                Id(
                    (
                        Atom('Param' type=inline),
                        #2,
                    ),
                ),
                Id(
                    (
                        Atom('Return' type=inline),
                        #2,
                    ),
                ),
            },
            child_decls: {},
            exports: {},
        },
        1: Symbol {
            symbol_id: 1,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            79,
                        ),
                        end: SourcePos(
                            97,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        2: Symbol {
            symbol_id: 2,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            98,
                        ),
                        end: SourcePos(
                            112,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        3: Symbol {
            symbol_id: 3,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            113,
                        ),
                        end: SourcePos(
                            128,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        4: Symbol {
            symbol_id: 4,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            129,
                        ),
                        end: SourcePos(
                            145,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        5: Symbol {
            symbol_id: 5,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            201,
                        ),
                        end: SourcePos(
                            295,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            296,
                        ),
                        end: SourcePos(
                            333,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        Atom('OverloadTypeParam' type=dynamic),
                        #2,
                    ),
                ),
                Id(
                    (
                        Atom('OverloadParam' type=dynamic),
                        #2,
                    ),
                ),
                Id(
                    (
                        Atom('OverloadReturn' type=dynamic),
                        #2,
                    ),
                ),
            },
            child_decls: {},
            exports: {},
        },
        6: Symbol {
            symbol_id: 6,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            430,
                        ),
                        end: SourcePos(
                            456,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        7: Symbol {
            symbol_id: 7,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            457,
                        ),
                        end: SourcePos(
                            479,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        8: Symbol {
            symbol_id: 8,
            is_public: true,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            480,
                        ),
                        end: SourcePos(
                            503,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        9: Symbol {
            symbol_id: 9,
            is_public: false,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            505,
                        ),
                        end: SourcePos(
                            530,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        10: Symbol {
            symbol_id: 10,
            is_public: false,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            531,
                        ),
                        end: SourcePos(
                            552,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
        11: Symbol {
            symbol_id: 11,
            is_public: false,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            553,
                        ),
                        end: SourcePos(
                            575,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "<omitted>",
                        ),
                    ),
                },
            ],
            deps: {},
            child_decls: {},
            exports: {},
        },
    },
    traced_re_exports: {},
    traced_referrers: {},
}
== export definitions ==
[overloaded]: file:///mod.ts:201..295
  export function overloaded<T extends OverloadTypeParam>(param: OverloadParam): OverloadReturn;
file:///mod.ts:296..333
  export function overloaded(): string;
[test]: file:///mod.ts:0..77
  export function test<T extends TypeParam = Default>(param: Param): Return {
  }
