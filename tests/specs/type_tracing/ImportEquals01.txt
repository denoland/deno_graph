# mod.ts
export import MyExport = Test.Inner;

namespace Test {
  export class Inner {
  }
}

# output
file:///mod.ts: ModuleSymbol {
    module_id: ModuleId(
        0,
    ),
    specifier: "file:///mod.ts",
    exports: {
        "MyExport": 0,
    },
    re_exports: [],
    swc_id_to_symbol_id: {
        (
            Atom('MyExport' type=dynamic),
            #2,
        ): 0,
        (
            Atom('Test' type=inline),
            #2,
        ): 1,
        (
            Atom('Inner' type=inline),
            #3,
        ): 2,
    },
    symbols: {
        0: Symbol {
            symbol_id: 0,
            is_public: true,
            decls: {
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            0,
                        ),
                        end: SourcePos(
                            36,
                        ),
                    },
                    kind: QualifiedTarget(
                        (
                            Atom('MyExport' type=dynamic),
                            #2,
                        ),
                        [
                            "Test",
                            "Inner",
                        ],
                    ),
                },
            },
            deps: {},
            exports: {},
        },
        1: Symbol {
            symbol_id: 1,
            is_public: false,
            decls: {
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            40,
                        ),
                        end: SourcePos(
                            88,
                        ),
                    },
                    kind: Definition,
                },
            },
            deps: {
                (
                    Atom('Inner' type=inline),
                    #3,
                ),
            },
            exports: {
                "Inner": 2,
            },
        },
        2: Symbol {
            symbol_id: 2,
            is_public: false,
            decls: {
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            60,
                        ),
                        end: SourcePos(
                            85,
                        ),
                    },
                    kind: Definition,
                },
            },
            deps: {},
            exports: {},
        },
    },
    traced_re_exports: {},
}
== export definitions ==
[MyExport]: NONE
