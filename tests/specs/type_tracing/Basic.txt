# mod.ts
import { A } from "./a.ts";

export const ExportA: typeof A = A;

# a.ts
interface AInner {
  prop: string;
}

interface AInnerUnused {
  prop2: string;
}

export class A {
  prop: AInner;
}

# output
{
    "file:///a.ts": ModuleSymbol {
        module_id: ModuleId(
            1,
        ),
        next_symbol_id: 3,
        exports: {
            "A": 2,
        },
        re_exports: [],
        default_export_symbol_id: None,
        swc_id_to_symbol_id: {
            (
                Atom('AInner' type=inline),
                #2,
            ): 0,
            (
                Atom('AInnerUnused' type=dynamic),
                #2,
            ): 1,
            (
                Atom('A' type=inline),
                #2,
            ): 2,
        },
        symbols: {
            0: Symbol {
                is_public: true,
                decls: {
                    SymbolDecl {
                        range: SourceRange {
                            start: SourcePos(
                                0,
                            ),
                            end: SourcePos(
                                36,
                            ),
                        },
                        kind: Definition,
                    },
                },
                deps: {
                    (
                        Atom('AInner' type=inline),
                        #2,
                    ),
                    (
                        Atom('prop' type=inline),
                        #0,
                    ),
                },
            },
            1: Symbol {
                is_public: false,
                decls: {
                    SymbolDecl {
                        range: SourceRange {
                            start: SourcePos(
                                38,
                            ),
                            end: SourcePos(
                                81,
                            ),
                        },
                        kind: Definition,
                    },
                },
                deps: {
                    (
                        Atom('AInnerUnused' type=dynamic),
                        #2,
                    ),
                    (
                        Atom('prop2' type=inline),
                        #0,
                    ),
                },
            },
            2: Symbol {
                is_public: true,
                decls: {
                    SymbolDecl {
                        range: SourceRange {
                            start: SourcePos(
                                83,
                            ),
                            end: SourcePos(
                                117,
                            ),
                        },
                        kind: Definition,
                    },
                },
                deps: {
                    (
                        Atom('AInner' type=inline),
                        #2,
                    ),
                },
            },
        },
        traced_re_exports: {},
    },
    "file:///mod.ts": ModuleSymbol {
        module_id: ModuleId(
            0,
        ),
        next_symbol_id: 2,
        exports: {
            "ExportA": 1,
        },
        re_exports: [],
        default_export_symbol_id: None,
        swc_id_to_symbol_id: {
            (
                Atom('A' type=inline),
                #2,
            ): 0,
            (
                Atom('ExportA' type=inline),
                #2,
            ): 1,
        },
        symbols: {
            0: Symbol {
                is_public: true,
                decls: {
                    SymbolDecl {
                        range: SourceRange {
                            start: SourcePos(
                                9,
                            ),
                            end: SourcePos(
                                10,
                            ),
                        },
                        kind: FileRef(
                            FileDep {
                                name: Name(
                                    "A",
                                ),
                                specifier: "./a.ts",
                            },
                        ),
                    },
                },
                deps: {},
            },
            1: Symbol {
                is_public: true,
                decls: {
                    SymbolDecl {
                        range: SourceRange {
                            start: SourcePos(
                                42,
                            ),
                            end: SourcePos(
                                63,
                            ),
                        },
                        kind: Definition,
                    },
                },
                deps: {
                    (
                        Atom('A' type=inline),
                        #2,
                    ),
                },
            },
        },
        traced_re_exports: {},
    },
}