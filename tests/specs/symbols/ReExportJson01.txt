# mod.ts
import other from "./non_public.json" with { type: 'json' };
export { default as configFile } from './bar.json' assert { type: 'json' };

console.log(other);

# bar.json
{
  "test": 5
}

# non_public.json
{}

# output
file:///bar.json: JsonModuleSymbol {
    module_id: ModuleId(
        1,
    ),
    specifier: "file:///bar.json",
    exports: {
        "default": 0,
    },
    default_symbol: Symbol {
        module_id: ModuleId(
            1,
        ),
        symbol_id: 0,
        decls: [
            SymbolDecl {
                range: SourceRange {
                    start: SourcePos(
                        0,
                    ),
                    end: SourcePos(
                        15,
                    ),
                },
                kind: Definition(
                    SymbolNode(
                        "<json>",
                    ),
                ),
            },
        ],
        deps: {},
        child_ids: {},
        exports: {},
        members: {},
    },
}
file:///mod.ts: EsmModuleSymbol {
    module_id: ModuleId(
        0,
    ),
    specifier: "file:///mod.ts",
    child_ids: {},
    exports: {
        "configFile": 1,
    },
    re_exports: [],
    swc_id_to_symbol_id: {
        (
            "other",
            #2,
        ): 0,
    },
    symbols: {
        0: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 0,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            7,
                        ),
                        end: SourcePos(
                            12,
                        ),
                    },
                    kind: FileRef(
                        FileDep {
                            name: Name(
                                "default",
                            ),
                            specifier: "./non_public.json",
                        },
                    ),
                },
            ],
            deps: {},
            child_ids: {},
            exports: {},
            members: {},
        },
        1: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 1,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            70,
                        ),
                        end: SourcePos(
                            91,
                        ),
                    },
                    kind: FileRef(
                        FileDep {
                            name: Name(
                                "default",
                            ),
                            specifier: "./bar.json",
                        },
                    ),
                },
            ],
            deps: {},
            child_ids: {},
            exports: {},
            members: {},
        },
    },
}
file:///non_public.json: JsonModuleSymbol {
    module_id: ModuleId(
        2,
    ),
    specifier: "file:///non_public.json",
    exports: {
        "default": 0,
    },
    default_symbol: Symbol {
        module_id: ModuleId(
            2,
        ),
        symbol_id: 0,
        decls: [
            SymbolDecl {
                range: SourceRange {
                    start: SourcePos(
                        0,
                    ),
                    end: SourcePos(
                        2,
                    ),
                },
                kind: Definition(
                    SymbolNode(
                        "<json>",
                    ),
                ),
            },
        ],
        deps: {},
        child_ids: {},
        exports: {},
        members: {},
    },
}
== export definitions ==
[configFile]: file:///bar.json:0..15
  {
    "test": 5
  }
