# mod.ts
const c = { a: "a", b: 2 };
const d: { f: string; g: number; } = { f: "f", g: 2 };

export const {
  /** export a doc */
  a,
  /** export b doc */
  b,
}: {
  /** type alias doc */
  a: string;
  /** other doc */
  b: number;
} = c;

# output
file:///mod.ts: EsmModuleInfo {
    module_id: ModuleId(
        0,
    ),
    specifier: "file:///mod.ts",
    re_exports: [],
    swc_id_to_symbol_id: {
        (
            "c",
            #2,
        ): 1,
        (
            "d",
            #2,
        ): 2,
        (
            "a",
            #2,
        ): 4,
        (
            "b",
            #2,
        ): 5,
    },
    symbols: {
        0: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 0,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            0,
                        ),
                        end: SourcePos(
                            233,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "const c = { a: \"a\", b: 2 };\nconst d: { f: string; g: number; } = { f: \"f\", g: 2 };\n\nexport const {\n  /** export a doc */\n  a,\n  /** export b doc */\n  b,\n}: {\n  /** type alias doc */\n  a: string;\n  /** other doc */\n  b: number;\n} = c;",
                        ),
                    ),
                },
            ],
            deps: {},
            child_ids: {
                1,
                2,
                3,
            },
            exports: {
                "a": 4,
                "b": 5,
            },
            members: {},
        },
        1: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 1,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            6,
                        ),
                        end: SourcePos(
                            26,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "c: const c = { a: \"a\", b: 2 };",
                        ),
                    ),
                },
            ],
            deps: {},
            child_ids: {},
            exports: {},
            members: {},
        },
        2: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 2,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            34,
                        ),
                        end: SourcePos(
                            81,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "d: const d: { f: string; g: number; } = { f: \"f\", g: 2 };",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        "f",
                        #0,
                    ),
                ),
                Id(
                    (
                        "g",
                        #0,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        3: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 3,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            84,
                        ),
                        end: SourcePos(
                            233,
                        ),
                    },
                    kind: TargetSelf,
                },
            ],
            deps: {
                Id(
                    (
                        "a",
                        #2,
                    ),
                ),
                Id(
                    (
                        "b",
                        #2,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        4: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 4,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            97,
                        ),
                        end: SourcePos(
                            232,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "export const {\n  /** export a doc */\n  a,\n  /** export b doc */\n  b,\n}: {\n  /** type alias doc */\n  a: string;\n  /** other doc */\n  b: number;\n} = c;",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        "a",
                        #0,
                    ),
                ),
                Id(
                    (
                        "b",
                        #0,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        5: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 5,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            97,
                        ),
                        end: SourcePos(
                            232,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "export const {\n  /** export a doc */\n  a,\n  /** export b doc */\n  b,\n}: {\n  /** type alias doc */\n  a: string;\n  /** other doc */\n  b: number;\n} = c;",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        "a",
                        #0,
                    ),
                ),
                Id(
                    (
                        "b",
                        #0,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
    },
}
== export definitions ==
[a]: file:///mod.ts:97..232
  {
    /** export a doc */
  ...
    b: number;
  } = c
[b]: file:///mod.ts:97..232
  {
    /** export a doc */
  ...
    b: number;
  } = c
