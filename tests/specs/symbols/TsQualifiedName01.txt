# mod.ts
export type Test = typeof Other.Test;

namespace Other {
  export const Test = 1;

  export const other = 2;
}

# output
file:///mod.ts: EsmModuleSymbol {
    module_id: ModuleId(
        0,
    ),
    specifier: "file:///mod.ts",
    child_ids: {
        0,
        1,
    },
    exports: {
        "Test": 0,
    },
    re_exports: [],
    swc_id_to_symbol_id: {
        (
            "Test",
            #2,
        ): 0,
        (
            "Other",
            #2,
        ): 1,
        (
            "Test",
            #3,
        ): 3,
        (
            "other",
            #3,
        ): 5,
    },
    symbols: {
        0: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 0,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            0,
                        ),
                        end: SourcePos(
                            37,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "export type Test = typeof Other.Test;",
                        ),
                    ),
                },
            ],
            deps: {
                QualifiedId(
                    (
                        "Other",
                        #2,
                    ),
                    [
                        "Test",
                    ],
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        1: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 1,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            39,
                        ),
                        end: SourcePos(
                            110,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "namespace Other {\n  export const Test = 1;\n\n  export const other = 2;\n}",
                        ),
                    ),
                },
            ],
            deps: {
                Id(
                    (
                        "Test",
                        #3,
                    ),
                ),
                Id(
                    (
                        "other",
                        #3,
                    ),
                ),
            },
            child_ids: {
                2,
                4,
            },
            exports: {
                "Test": 3,
                "other": 5,
            },
            members: {},
        },
        2: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 2,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            59,
                        ),
                        end: SourcePos(
                            81,
                        ),
                    },
                    kind: TargetSelf,
                },
            ],
            deps: {
                Id(
                    (
                        "Test",
                        #3,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        3: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 3,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            72,
                        ),
                        end: SourcePos(
                            80,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "export const Test = 1;",
                        ),
                    ),
                },
            ],
            deps: {},
            child_ids: {},
            exports: {},
            members: {},
        },
        4: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 4,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            85,
                        ),
                        end: SourcePos(
                            108,
                        ),
                    },
                    kind: TargetSelf,
                },
            ],
            deps: {
                Id(
                    (
                        "other",
                        #3,
                    ),
                ),
            },
            child_ids: {},
            exports: {},
            members: {},
        },
        5: Symbol {
            module_id: ModuleId(
                0,
            ),
            symbol_id: 5,
            decls: [
                SymbolDecl {
                    range: SourceRange {
                        start: SourcePos(
                            98,
                        ),
                        end: SourcePos(
                            107,
                        ),
                    },
                    kind: Definition(
                        SymbolNode(
                            "export const other = 2;",
                        ),
                    ),
                },
            ],
            deps: {},
            child_ids: {},
            exports: {},
            members: {},
        },
    },
}
== export definitions ==
[Test]: file:///mod.ts:0..37
  export type Test = typeof Other.Test;
