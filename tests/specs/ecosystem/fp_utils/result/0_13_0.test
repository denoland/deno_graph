fp-utils/result/0.13.0
-- deno.lock --
{
  "version": "3",
  "remote": {}
}

===

== FAST CHECK EMIT PASSED ==

== TYPE CHECK FAILED ==
-- stdout --

-- stderr --
error: TS2416 [ERROR]: Property 'flatMap' in type 'Ok<T>' is not assignable to the same property in base type 'Result<T, never>'.
  Types of parameters 'fn' and 'fn' are incompatible.
    Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
      Type 'Err<any>' is not assignable to type 'Result<any, any>'.
        Types of property 'flatMap' are incompatible.
          Types of parameters '_fn' and 'fn' are incompatible.
            Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
              Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                Types of property 'isErr' are incompatible.
                  Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                    Signature '(): false' must be a type predicate.
  /** {@link Result.flatMap} */ flatMap<U, UError>(fn: (value: T) => Result<U, UError>): Result<U, UError> {
                                ~~~~~~~
    at file://<tmpdir>/result.ts:555:33

TS2416 [ERROR]: Property 'isErr' in type 'Ok<T>' is not assignable to the same property in base type 'Result<T, never>'.
  Type '() => false' is not assignable to type '<UError extends never>() => this is Err<UError>'.
    Signature '(): false' must be a type predicate.
  /** {@link Result.isErr} */ isErr(): false {
                              ~~~~~
    at file://<tmpdir>/result.ts:564:31

TS2416 [ERROR]: Property 'map' in type 'Ok<T>' is not assignable to the same property in base type 'Result<T, never>'.
  Type '<U>(fn: (value: T) => U) => Ok<U>' is not assignable to type '<U>(fn: (value: T) => U) => Result<U, never>'.
    Call signature return types 'Ok<U>' and 'Result<U, never>' are incompatible.
      The types of 'flatMap' are incompatible between these types.
        Types of parameters 'fn' and 'fn' are incompatible.
          Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
            Type 'Err<any>' is not assignable to type 'Result<any, any>'.
              Types of property 'flatMap' are incompatible.
                Types of parameters '_fn' and 'fn' are incompatible.
                  Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
                    Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                      Types of property 'isErr' are incompatible.
                        Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                          Signature '(): false' must be a type predicate.
  /** {@link Result.map} */ map<U>(fn: (value: T) => U): Ok<U> {
                            ~~~
    at file://<tmpdir>/result.ts:570:29

TS2416 [ERROR]: Property 'mapErr' in type 'Ok<T>' is not assignable to the same property in base type 'Result<T, never>'.
  Type '<U>(_fn: (value: never) => U) => this' is not assignable to type '<UError>(fn: (value: never) => UError) => Result<T, UError>'.
    Type 'this' is not assignable to type 'Result<T, UError>'.
      Type 'Ok<T>' is not assignable to type 'Result<T, UError>'.
        Types of property 'flatMap' are incompatible.
          Types of parameters 'fn' and 'fn' are incompatible.
            Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
              Type 'Err<any>' is not assignable to type 'Result<any, any>'.
                Types of property 'flatMap' are incompatible.
                  Types of parameters '_fn' and 'fn' are incompatible.
                    Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
                      Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                        Types of property 'isErr' are incompatible.
                          Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                            Signature '(): false' must be a type predicate.
  /** {@link Result.mapErr} */ mapErr<U>(_fn: (value: never) => U): this {
                               ~~~~~~
    at file://<tmpdir>/result.ts:573:32

TS2416 [ERROR]: Property 'flatMap' in type 'Err<TError>' is not assignable to the same property in base type 'Result<never, TError>'.
  Types of parameters '_fn' and 'fn' are incompatible.
    Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
      Type 'Err<any>' is not assignable to type 'Result<any, any>'.
        Types of property 'flatMap' are incompatible.
          Types of parameters '_fn' and 'fn' are incompatible.
            Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
              Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                Types of property 'isErr' are incompatible.
                  Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                    Signature '(): false' must be a type predicate.
  /** {@link Result.flatMap} */ flatMap<U, UError>(_fn: (value: never) => Result<U, UError>): this {
                                ~~~~~~~
    at file://<tmpdir>/result.ts:607:33

TS2416 [ERROR]: Property 'isOk' in type 'Err<TError>' is not assignable to the same property in base type 'Result<never, TError>'.
  Type '() => false' is not assignable to type '<U extends never>() => this is Ok<U>'.
    Signature '(): false' must be a type predicate.
  /** {@link Result.isOk} */ isOk(): false {
                             ~~~~
    at file://<tmpdir>/result.ts:619:30

TS2416 [ERROR]: Property 'map' in type 'Err<TError>' is not assignable to the same property in base type 'Result<never, TError>'.
  Type '<U>(_fn: (value: never) => U) => this' is not assignable to type '<U>(fn: (value: never) => U) => Result<U, TError>'.
    Type 'this' is not assignable to type 'Result<U, TError>'.
      Type 'Err<TError>' is not assignable to type 'Result<U, TError>'.
        Types of property 'flatMap' are incompatible.
          Types of parameters '_fn' and 'fn' are incompatible.
            Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
              Type 'Err<any>' is not assignable to type 'Result<any, any>'.
                Types of property 'flatMap' are incompatible.
                  Types of parameters '_fn' and 'fn' are incompatible.
                    Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
                      Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                        Types of property 'isErr' are incompatible.
                          Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                            Signature '(): false' must be a type predicate.
  /** {@link Result.map} */ map<U>(_fn: (value: never) => U): this {
                            ~~~
    at file://<tmpdir>/result.ts:622:29

TS2416 [ERROR]: Property 'mapErr' in type 'Err<TError>' is not assignable to the same property in base type 'Result<never, TError>'.
  Type '<U>(fn: (value: TError) => U) => Err<U>' is not assignable to type '<UError>(fn: (value: TError) => UError) => Result<never, UError>'.
    Call signature return types 'Err<UError>' and 'Result<never, UError>' are incompatible.
      The types of 'flatMap' are incompatible between these types.
        Types of parameters '_fn' and 'fn' are incompatible.
          Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
            Type 'Err<any>' is not assignable to type 'Result<any, any>'.
              Types of property 'flatMap' are incompatible.
                Types of parameters '_fn' and 'fn' are incompatible.
                  Type 'Err<any> | Ok<any>' is not assignable to type 'Result<any, any>'.
                    Type 'Ok<any>' is not assignable to type 'Result<any, any>'.
                      Types of property 'isErr' are incompatible.
                        Type '() => false' is not assignable to type '<UError extends any>() => this is Err<UError>'.
                          Signature '(): false' must be a type predicate.
  /** {@link Result.mapErr} */ mapErr<U>(fn: (value: TError) => U): Err<U> {
                               ~~~~~~
    at file://<tmpdir>/result.ts:625:32

Found 8 errors.

